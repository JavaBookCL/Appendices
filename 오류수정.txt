오류수정

p130 UML 클래스 다이어그램에서
void sayHello()
-->
sayHello(): void

p187 코드 수정
helloArr2[0] --> hArr2[0]
helloArr2[1] --> hArr2[1]
helloArr2[2] --> hArr2[2]

p187 그림 수정
hArr1[2] --> hArr1[1]
hArr1[3] --> hArr1[2]
hArr2[2] --> hArr2[1]
hArr2[3] --> hArr2[2]

p 199
페이지 중간의 소스 코드에서  07번째 줄 코드
i(1)이 j(2)보다 큽니다 
-->
i(1)이 j(2)보다 작습니다.

p246
실습문제 8, 소스코드 03
double arr[] = { 1.1, 2.3, 4.7, 7.5 }; 
-->
double[] arr = { 1.1, 2.3, 4.7, 7.5 };

p247
소스 코드 4-18 Array6.java의 03

double arr[] = { 1.1, 2.3, 4.7, 7.5 }; 
-->
double[] arr = { 1.1, 2.3, 4.7, 7.5 };

p248 아래에서 4 번째 줄

jshell> double arr[] = { 1.1, 2.3, 4.7, 7.5 };
-->
jshell> double[] arr = { 1.1, 2.3, 4.7, 7.5 };

p250 가운데 쯤 소스 코드

jshell> double arr[] = { 0, 0, 0, 0 };
-->
jshell> double[] arr = { 0, 0, 0, 0 };

p248 dkfodptj 2 번째 줄

jshell> double arr[] = { 0, 0, 0, 0 };
-->
jshell> double[] arr = { 0, 0, 0, 0 };

p252 위에서 여섯 번째 줄
Hello arr[] = new Hello[3]; // 객체 배열 생성
-->
Hello[] arr = new Hello[3]; // 객체 배열 생성

p252 가운데 쯤 소스 코드
jshell> String whom[] = { "ycho", "jsl", "everyone" };
-->
jshell> String[] whom = { "ycho", "jsl", "everyone" };

p253 소스 코드 4-19 ForEach1.java 03
int arr[] = { 1, 2, 3, 4, 5 };
-->
int[] arr = { 1, 2, 3, 4, 5 };

p254 소스 코드 4-20 ForEach2.java 03
String cities[] = { "Seoul", "New York", "Sydney" };
-->
String[] cities = { "Seoul", "New York", "Sydney" };

p260 페이지 끝 표
Wendesday
--> 
Wednesday

p261 코드
dayStr = "Wendesday";
-->
dayStr = "Wednesday";

p296
소스 코드 5-2 PrintNumInRange.java

11번째 줄
void printInt() { System.out.println(value); }17
--> 
void printInt() { System.out.println(value); }

p333
n! = n × (n - 1) * (n - 2) × ... × 2 × 1 (if n >= 1)
--> 
n! = n × (n - 1) × (n - 2) × ... × 2 × 1 (if n >= 1)

p337
그림 (10)
return 2 * 2
-->
return 2 * 1

p351
Student 클래스 다이어그램에서 number: String과 birth: Date의 순서를 바꿈(birth: Date를 위에 위치시킴)

p420
소스 코드 6-42 Order.java의 18과 19줄 사이에
quantity--; // 한 잔 무료
를 추가

기존 코드
if (v >= MAX_NVISIT) {            
    System.out.printf("%d ordered. So you get free coffee!\n", v);
    customer.resetVisit();
}

수정된 코드
if (v >= MAX_NVISIT) {            
    System.out.printf("%d ordered. So you get free coffee!\n", v);
    customer.resetVisit();
    quantity--;  // 한 잔 무료
}

p421
소스 코드 6-42 Order.java의 23줄 코드에서
You
-->
Your
로 변경

기존 코드
System.out.printf("You charge will be %d\n", total);

수정된 코드
System.out.printf("Your charge will be %d\n", total);

p422
jshell에서 실행시킨 코드 제일 마지막 부분

jshell> o.charge();
You charge will be 10000
-->
jshell> o.charge();
Your charge will be 10000

p423
소스 코드 6-45 TestCoffeeHouse.java의 11줄에서
12 
-->
11
로 변경

기존 코드
for (int i = 0; i < 12; i++) { // 11번 주문

수정된 코드
for (int i = 0; i < 11; i++) { // 11번 주문

실행 결과의 마지막 줄
You charge will be 60000
-->
Your Charge will be 50000

p516
그림에서 "poodle" --> "Poodle"

p551
소스 코드 7-45 NewCat.java
코드 첫 줄에 다음 코드 삽입

import java.time.LocalDateTime;

코드 14번째 줄
if (!(o instanceof NewCat)) { return false } //
-->
if (!(o instanceof NewCat)) { return false; } 

p569
UML 클래스 다이어그램에서 Queue 클래스와 Collection 클래스를 연결하는 화살표가 점선으로 그려져야 함(실선이 아님)

p571
하단 그림에서 
marks[0] --> marks[0][]
marks[1] --> marks[1][]
marks[2] --> marks[2][]
[][0] --> marks[][0]

p599
슬라이스 치즈 한 장을 넣는 방법(cookWithCheese()과
-->
슬라이스 치즈 한 장을 넣는 방법(cookWithCheese())과

p666
위에서 세 번째 줄
"따라서 입출력은 데이터를 바이트(byte) 단위로 또는 텍스트 단위로 구분하여 처리한다"
-->
"따라서 입출력은 데이터를 바이트(byte) 단위로 또는 문자 단위로 구분하여 처리한다"

위에서 5~6째 줄(공백 라인 제외)
"운영체제에 따라 줄바꿈 문자를 표현하는 방법들이 다음 표에서 보인 것처럼 다르게 사용된다" 
--> 
"운영체제에 따라 줄바꿈 문자를 표현하는 방법들이 다르게 사용된다" 

java.io.Reader설명에서 "그리고 문자열 단위로 입력 받을 수 있는 readline() 함수를 제공한다." 삭제. 이 기능은 BufferedReader에서 제공하는 기능임
java.io.Writer설명
"java.io.Writer 문자 단위로 출력할 수 있도록 write() 함수를 제공한다. 그리고 문자열 단위로 출력할 수 있도록 writeline() 함수를 제공한다."
--> 
"java.io.Writer 문자와 문자열을 출력할 수 있는 write() 함수를 제공한다."

 p673
 
 Scanner 클래스를 이용해서 파일에서 데이터 읽기 부분 중
 2~3째 줄
 "사용법은 앞에서 본 것과 크게 다르지 않다"
 -->
 자바의 File 클래스는 운영체제의 파일 시스템에서 제공하는 파일 또는 디렉토리를 다루기 위해서 만들어졌다. 
 파일의 이름 또는 경로를 구하기 위해서 사용할 수도 있지만, 입출력 클래스에 전달하거나, 파일의 삭제, 
 이름 변경, 폴더 생성, 파일인지 디렉토리인지 확인하는 용도 등 운영체제에서 파일이나 폴더를 이용해서 
 처리할 수 있는 다양한 기능들을 제공한다.여기서는 파일의 입출력을 위해 File 객체를 생성하는 용도로만 
 사용하는 것을 보인다. Scanner와 File 클래스를 연동하는 사용법은 FileInputStream을 
 사용한 것과 크게 다르지 않다.
 
 p676
 FileInputStream을 이용해서 파일 읽기 부분 중
 11~15째 줄(소스 코드 제외)
 read() 함수가 반환하는 실제 값은 0~255까지의 byte 값이다. 그런데 int형으로 결과를 반환하는 것은
 오류가 발생했을 때 알리기 위해서이다. read() 함수는 오류가 발생하는 경우 -1을 반환한다. 그런데 
 byte는 0이상의 양수만을 표현할 수 있으므로, 반환 자료형이 byte이면 오류를 표현할 수 없다. 그래서 
 int형을 사용해서 오류가 발생하면 -1을, 그렇지 않으면 0~255까지의 값을 반환한다.
 -->
 자바의 byte는 -128~127 까지의 숫자만 표현할 수 있다. 파일에서 읽는 데이터는 1바이트 
 즉 0 ~ 255까지의 데이터를 표현할 수 있어야 하고, 또 오류를 표기하기 위해 -1을 반환할 수 
 있어야 하므로  byte 자료형은 적합하지 않다. short 또는 int형을 사용해야 하는데, 자바에서는 
 일반적으로 많이 사용하는 int형을 선택하였다. 그래서 int형을 사용해서 오류가 발생하면 -1을, 
 그렇지 않으면 0~255까지의 값을 반환한다.
 
 p680
다음은 문 자 한 개를 읽는 코드이다.
 --> 
다음은 문자 한 개를 읽고 화면에 출력하는 코드이다.
 
 p696
 첫 번째 줄
자바에서 부호화 방식을 지정해서 파일을 읽으려면 InputStreamReader를 사용하면서 부호화 방법을 지정해야 한다.
-->
자바에서 부호화 방식을 지정해서 파일을 읽으려면 InputStreamReader 객체를 생성하면서 어떤 부호화 방법을 사용할지 알려줘야 한다.

2~3째줄
다른 방법도 있지만, 자바 매뉴얼을 확인하기 바란다
-->
다른 방법에 대해서는 자바 매뉴얼을 참조한다.

p708
끝에서 세 번째 줄
컴파일 할 때에는
-->
컴파일 할 때는

p709
끝에서 다섯 번째 줄
이러한 예외들은 자바의 클래스로
-->
이러한 예외들은 클래스로

끝에서 네 번째 줄
자바의 기본 라이브러이에서
-->
자바의 기본 라이브러리에서

p714
예외 처리 방법 3 -- 예외 처리 코드 작성
다섯 번째 줄
예외클래스 종류를 지정한다
--> 
예외 클래스 종류를 명시한다

p721
소스 코드를 제외하고 앞에서 다섯 번째 줄
자바의 자동 리소드
-->
자바의 자동 리소스
